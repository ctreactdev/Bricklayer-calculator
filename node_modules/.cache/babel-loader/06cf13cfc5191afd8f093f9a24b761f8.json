{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cttor\\\\source\\\\repos\\\\murer-apps\\\\murer-nx\\\\libs\\\\ui\\\\src\\\\components\\\\molecules\\\\CvrSearch\\\\CvrInput.js\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CvrInput = props => {\n  _s();\n\n  const [cvrData, setCvrData] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const {\n    field: {\n      name,\n      value\n    },\n    form: {\n      setFieldValue\n    },\n    placeholder: placeholder\n  } = props;\n\n  const callCvrRegister = cvrValue => {\n    const response = getCvrResults(cvrValue);\n    response.then(data => {\n      setCvrData(data.companies);\n    });\n  };\n\n  const onValueChange = cvrText => {\n    setText(cvrText);\n    callCvrRegister(cvrText);\n    setSuggestions(cvrData);\n  };\n\n  const onSuggestHandler = suggestion => {\n    setText(suggestion);\n    setFieldValue(name, suggestion);\n    setSuggestions([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"myInput\",\n      type: \"text\",\n      className: \"input inputStyle\",\n      onChange: e => onValueChange(e.target.value),\n      value: text,\n      autoComplete: \"no\",\n      placeholder: placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggestionWrapper\",\n      children: suggestions && suggestions.map((suggestion, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cvrSuggestion\",\n        onClick: () => onSuggestHandler(suggestion.name),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: suggestion.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CvrInput, \"CTB7WtTMw6QzwZXYmeuhEUv/k0A=\");\n\n_c = CvrInput;\nexport default CvrInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CvrInput\");","map":{"version":3,"names":["React","useState","CvrInput","props","cvrData","setCvrData","text","setText","suggestions","setSuggestions","field","name","value","form","setFieldValue","placeholder","callCvrRegister","cvrValue","response","getCvrResults","then","data","companies","onValueChange","cvrText","onSuggestHandler","suggestion","e","target","map","i"],"sources":["C:/Users/cttor/source/repos/murer-apps/murer-nx/libs/ui/src/components/molecules/CvrSearch/CvrInput.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst CvrInput = (props) => {\n  const [cvrData, setCvrData] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const {\n    field: { name, value },\n    form: { setFieldValue },\n    placeholder: placeholder,\n  } = props;\n\n  const callCvrRegister = (cvrValue) => {\n    const response = getCvrResults(cvrValue);\n    response.then((data) => {\n      setCvrData(data.companies);\n    });\n  };\n\n  const onValueChange = (cvrText) => {\n    setText(cvrText);\n    callCvrRegister(cvrText);\n    setSuggestions(cvrData);\n  };\n\n  const onSuggestHandler = (suggestion) => {\n    setText(suggestion);\n\n    setFieldValue(name, suggestion);\n    setSuggestions([]);\n  };\n  return (\n    <>\n      <input\n        id=\"myInput\"\n        type=\"text\"\n        className=\"input inputStyle\"\n        onChange={(e) => onValueChange(e.target.value)}\n        value={text}\n        autoComplete=\"no\"\n        placeholder={placeholder}\n      ></input>\n      <div className=\"suggestionWrapper\">\n        {suggestions &&\n          suggestions.map((suggestion, i) => (\n            <div\n              key={i}\n              className=\"cvrSuggestion\"\n              onClick={() => onSuggestHandler(suggestion.name)}\n            >\n              <p>{suggestion.name}</p>\n            </div>\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default CvrInput;\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAC1B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;EAEA,MAAM;IACJS,KAAK,EAAE;MAAEC,IAAF;MAAQC;IAAR,CADH;IAEJC,IAAI,EAAE;MAAEC;IAAF,CAFF;IAGJC,WAAW,EAAEA;EAHT,IAIFZ,KAJJ;;EAMA,MAAMa,eAAe,GAAIC,QAAD,IAAc;IACpC,MAAMC,QAAQ,GAAGC,aAAa,CAACF,QAAD,CAA9B;IACAC,QAAQ,CAACE,IAAT,CAAeC,IAAD,IAAU;MACtBhB,UAAU,CAACgB,IAAI,CAACC,SAAN,CAAV;IACD,CAFD;EAGD,CALD;;EAOA,MAAMC,aAAa,GAAIC,OAAD,IAAa;IACjCjB,OAAO,CAACiB,OAAD,CAAP;IACAR,eAAe,CAACQ,OAAD,CAAf;IACAf,cAAc,CAACL,OAAD,CAAd;EACD,CAJD;;EAMA,MAAMqB,gBAAgB,GAAIC,UAAD,IAAgB;IACvCnB,OAAO,CAACmB,UAAD,CAAP;IAEAZ,aAAa,CAACH,IAAD,EAAOe,UAAP,CAAb;IACAjB,cAAc,CAAC,EAAD,CAAd;EACD,CALD;;EAMA,oBACE;IAAA,wBACE;MACE,EAAE,EAAC,SADL;MAEE,IAAI,EAAC,MAFP;MAGE,SAAS,EAAC,kBAHZ;MAIE,QAAQ,EAAGkB,CAAD,IAAOJ,aAAa,CAACI,CAAC,CAACC,MAAF,CAAShB,KAAV,CAJhC;MAKE,KAAK,EAAEN,IALT;MAME,YAAY,EAAC,IANf;MAOE,WAAW,EAAES;IAPf;MAAA;MAAA;MAAA;IAAA,QADF,eAUE;MAAK,SAAS,EAAC,mBAAf;MAAA,UACGP,WAAW,IACVA,WAAW,CAACqB,GAAZ,CAAgB,CAACH,UAAD,EAAaI,CAAb,kBACd;QAEE,SAAS,EAAC,eAFZ;QAGE,OAAO,EAAE,MAAML,gBAAgB,CAACC,UAAU,CAACf,IAAZ,CAHjC;QAAA,uBAKE;UAAA,UAAIe,UAAU,CAACf;QAAf;UAAA;UAAA;UAAA;QAAA;MALF,GACOmB,CADP;QAAA;QAAA;QAAA;MAAA,QADF;IAFJ;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA,gBADF;AAyBD,CAvDD;;GAAM5B,Q;;KAAAA,Q;AAyDN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}